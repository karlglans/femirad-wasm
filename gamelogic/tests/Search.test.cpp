#include "gtest/gtest.h"
#include "../logic/Search.h"
#include "../logic/ranking.h"

bool skipAll = true;

TEST(Searching_slowTest, slowTest_should_stop_3_line) {
  // there is an obvious best move
  if (skipAll) { ASSERT_TRUE(true); return; }
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,9,0,9,0, 0,0,0,0,0,0,0,0, // 68 70
    0,0,0,0,0,1,0,9, 0,0,0,0,0,0,0,0, // 87
    0,0,0,0,0,0,1,0, 2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1, 0,2,0,0,0,0,0,0,

    0,0,0,0,0,0,0,0, 9,0,0,0,0,0,0,0, // 136
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(9);
  search.doSearch(sr, 1, &board);
  EXPECT_EQ(sr.move, 136); // depth 5 => 135  nNodesSearched = 7634 6063
}

TEST(Searching_slowTest, handle_bad_possition) {
  if (skipAll) { ASSERT_TRUE(true); return; }
  // should not just give up
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0, 2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1, 0,2,0,0,0,0,0,0,

    0,0,0,0,0,0,0,0, 1,0,2,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(11);
  search.doSearch(sr, 2, &board); // searchedNodes 8085, 25
  EXPECT_EQ(sr.move, 153); // depth 5 => 135
}

TEST(Searching_slowTest, finish_instead_of_stopping_opponent) {
  if (skipAll) { ASSERT_TRUE(true); return; }
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,0,2,0,2,0,0,0,0,0,0,0,
    0,0,0,0,2,1,1,1,1,2,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,
    0,0,0,0,0,0,1,1,0,2,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,9,2,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(7);
  search.doSearch(sr, 1, &board);
  EXPECT_EQ(sr.move, 150);
  EXPECT_GE(sr.value, fiveInRow); // nNodesSearched: 124, 2
}

TEST(Searching_slowTest, search_result_should_inidcate_win) {
  if (skipAll) { ASSERT_TRUE(true); return; }
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0, // 39
    0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
    0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,9,0,0,0,0, // 107
    0,0,0,0,0,0,0,2,0,0,0,0,9,0,0,0, // 124
    0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(3);
  search.doSearch(sr, 1, &board);
  EXPECT_GE(sr.value, fiveInRow);
}

TEST(Searching_slowTest, should_see_a_future_win) {
  if (skipAll) { ASSERT_TRUE(true); return; }
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1,1,9,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(11);
  search.doSearch(sr, 1, &board);
  EXPECT_EQ(sr.move, 153);
  EXPECT_GE(sr.value, fiveInRow);
}

// 120 1
// 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
// 16   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
// 32   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
// 48   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
// 64   0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
// 80   0 0 0 0 0 1 0 1 2 0 0 0 0 0 0 0
// 96   0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0
// 112  0 0 0 0 0 0 0 1 1 2 0 0 0 0 0 0       0 1 2 2 1 2 2 0 0

// 128  0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0
// 144  0 0 0 0 0 0 x 0 2 0 0 0 0 0 0 0
//      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


// 153 p2 d10
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0

//0 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0    1 1 1 1  0  0 0 0 0 
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
//0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0